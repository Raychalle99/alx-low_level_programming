!<arch>
0-isupper.c/    0           0     0     644     296       `
#include "main.h"

/**
 * _isupper - checks for uppercase character
 * @c: The charcter to be checked
 * Return: 1 if c is uppercase, 0 otherwise
 */

int _isupper(int c)
{
        if (c >= 65 && c <= 90)
        {
                return (1);
        }
        else
                return (0);
}
0-memset.c/     0           0     0     644     385       `
#include "main.h"

/**
 * _memset - function that fills memory with a constant byte
 * @s: memory area to be filled
 * @b: constant byte
 * @n: number of times to copy b
 * Return: pointer to memory area s
 */

char *_memset(char *s, char b, unsigned int n)
{
        unsigned int i;

        for (i = 0; i < n; i++)
        {
                s[i] = b;
        }
        return (s);
}

0-strcat.c/     0           0     0     644     600       `
#include "main.h"

/**
 * _strcat -  function that concatenates two strings
 * @dest: destination string pointer
 * @src: source string pointer
 * Return: pointer to the resulting string dest
 */

char *_strcat(char *dest, char *src)
{
        int length_of_string, z;

        length_of_string = 0;

        while (dest[length_of_string] != '\0')
        {
                length_of_string++;
        }

        for (z = 0; src[z] != '\0'; z++, length_of_string++)
        {
                dest[length_of_string] = src[z];
        }

        dest[length_of_string] = '\0';
        return (dest);
}
100-atoi.c/     0           0     0     644     404       `
#include "main.h"
/**
 * _atoi - convert a string into an integer.
 *
 * @s: the string to use.
 *
 * Return: integer.
 */
int _atoi(char *s)
{
int sign = 1, i = 0;
unsigned int res = 0;

while (!(s[i] <= '9' && s[i] >= '0') && s[i] != '\0')
{
if (s[i] == '-')
sign *= -1;
i++;
}
while (s[i] <= '9' && (s[i] >= '0' && s[i] != '\0'))
{
res = (res * 10) + (s[i] - '0');
i++;
}
res *= sign;
return (res);
}
1-isdigit.c/    0           0     0     644     295       `
#include "main.h"

/**
 * _isdigit - checks for a digit 0 through 9
 * @c: The character to be checked
 * Return: 1 if c is a digit, 0 otherwise
 */

int _isdigit(int c)
{
        if (c >= 48 && c <= 57)
        {
                return (1);
        }
        else
                return (0);
}

1-memcpy.c/     0           0     0     644     388       `
#include "main.h"

/**
 * _memcpy - function that copies memory area
 * @n: function copies
 * @src: bytes from memory area
 * @dest: to memory area
 * Return: pointer to @dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
        unsigned int i = 0;

        while (i < n)
        {
                dest[i] = src[i];
                i++;
        }
        return (dest);
}
1-strncat.c/    0           0     0     644     629       `
#include "main.h"

/**
 * _strncat - function that concatenates two strings
 * @dest: destination string pointer
 * @src: source string pointer
 * @n:number of bytes
 * Return: pointer to destination string
 */

char *_strncat(char *dest, char *src, int n)
{
        int length_of_string, z;

        length_of_string = 0;
        while (dest[length_of_string] != '\0')
        {
                length_of_string++;
        }
        for (z = 0; z < n && src[z] != '\0'; z++, length_of_string++)
        {
                dest[length_of_string] = src[z];
        }
        dest[length_of_string] = '\0';
        return (dest);
}

2-strchr.c/     0           0     0     644     470       `
#include "main.h"

/**
 * _strchr - function that locates a character in a string
 * @s: The string to be searched
 * @c: The character to be located
 * Return: if c is found - a pointer tothe first occurence
 * if c is not found - NULL
 */

char *_strchr(char *s, char c)
{
        int index;

        for (index = 0; s[index] >= '\0'; index++)
        {
                if (s[index] == c)
                        return (s + index);
        }
        return ('\0');
}
2-strlen.c/     0           0     0     644     277       `
#include "main.h"

/**
 * _strlen - function that returns the length of a string
 * @s: string to be checked
 * Return: The length of the string
 */

int _strlen(char *s)
{
        int length = 0;

        while (s[length])
                length++;
        return (length);
}

2-strncpy.c/    0           0     0     644     530       `
#include "main.h"

/**
 * _strncpy - function that copies a string
 * @dest: destination string pointer
 * @src: source string pointer
 * @n: number o bytes
 * Return: pointer to destination string
 */

char *_strncpy(char *dest, char *src, int n)
{
        int numbers;

        for (numbers = 0; numbers < n && src[numbers] != '\0'; numbers++)
                dest[numbers] = src[numbers];
        {
                for (; numbers < n; numbers++)
                        dest[numbers] = '\0';
        }
        return (dest);
}
3-islower.c/    0           0     0     644     326       `
#include "main.h"
/**
 * _islower - Checks if a character is lowercase
 * @c: The character to be checked
 * Return: 1, otherwise 0
 */
int _islower(int c)
{
        if (c >= 97 && c <= 122)
        {
                return (1);
        }
        else
        {
                return (0);
        }
        _putchar('\n');
}
3-puts.c/       0           0     0     644     353       `
#include "main.h"
#include <stdio.h>

/**
 * _puts - function that prints a string, followed by a new line, to stdout
 * @str: pointer to the string
 * Return: String and new line
 */

void _puts(char *str)
{
        int i = 0;

        while (str[i])
        {
                _putchar(str[i]);
                i++;
        }
        _putchar('\n');
}

3-strspn.c/     0           0     0     644     796       `
#include "main.h"

/**
 * _strspn - function that gets the length of a prefix substring
 * @s: string to be searched
 * @accept: prefix to be measured
 * Return: number of bytes in s which
 * consist only of bytes from accept
 */

unsigned int _strspn(char *s, char *accept)
{
        unsigned int bytes = 0;
        int index;

        while (*s)
        {
                for (index = 0; accept[index]; index++)
                {
                        if (*s == accept[index])
                        {
                                bytes++;
                                break;
                        }
                        else if (accept[index + 1] == '\0')
                                return (bytes);
                }
                s++;
        }
        return (bytes);
}
4-isalpha.c/    0           0     0     644     237       `
#include "main.h"
		
/**
 * _isalpha - checks for alphabetic character
 * @c: the character to be checked
 * Return: 1 if c is a letter, 0 otherwise
 */
int _isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}

4-strpbrk.c/    0           0     0     644     593       `
#include "main.h"

/**
 * _strpbrk - function that searches a string for any of a set of bytes
 * @s: string to searched
 * @accept: the set of bytes to be searched
 * Return: if tye set is matched - a pointer to the matched byte
 * if no set matched - NULL
 */

char *_strpbrk(char *s, char *accept)
{
        int index;

        while (*s)
        {
                for (index = 0; accept[index]; index++)
                {
                        if (*s == accept[index])
                                return (s);
                }
                s++;
        }
        return ('\0');
}

5-strstr.c/     0           0     0     644     590       `
#include "main.h"

/**
 * _strstr - function that locates a substring
 * @haystack: string to be searched
 * @needle: substring to be located
 *
 * Return: if substring is located - a pointer to the beginning of the
 * located substring.
 * if substring is not located - NULL
 */

char *_strstr(char *haystack, char *needle)
{
int index;

if (*needle == 0)
return (haystack);

while (*haystack)
{
index = 0;
if (haystack[index] == needle[index])
{
do {
if (needle[index + 1] == '\0')
return (haystack);

index++;
} while (haystack[index] == needle[index]);
}
haystack++;
}
return ('\0');
}
6-abs.c/        0           0     0     644     283       `
#include "main.h"
/**
 * _abs - Computes the absolute value of an integer
 * @i: The integer value
 * Return: absolute value
 */
int _abs(int i)
{
        if (i >= 0)
        {
                return (i);
        }
        else
        {
                return (i * -1);
        }
}

9-strcpy.c/     0           0     0     644     361       `
#include "main.h"

/**
 * *_strcpy - function that copies the string pointed to by src
 * @dest: char data type
 * @src: char string type
 * Return: the pointer to dest
 */

char *_strcpy(char *dest, char *src)
{
        int i = -1;

        do {
                i++;
                dest[i] = src[i];
        } while (src[i] != '\0');
        return (dest);
}

main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     259       `
#include <unistd.h> 
 
/** 
 * _putchar - writes the character c to stdout 
 * @c: The character to print 
 * 
 * Return: On success 1. 
 * On error, -1 is returned, and errno is set appropriately. 
 */ 
int _putchar(char c) 
{ 
 return (write(1, &c, 1)); 
}

